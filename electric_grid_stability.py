# -*- coding: utf-8 -*-
"""Untitled35.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16KyWLnAkRSuQzSCBMDhdc9iYazycxXNr
"""

import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

g = nx.Graph()

users = ["Alice", "Bob", "Charlie", "David", "Eve"]
g.add_nodes_from(users)

g.nodes()

edges = [
    ("Alice", "Bob"),
    ("Alice", "Charlie"),
    ("Bob", "David"),
    ("Charlie", "Eve"),
    ("David", "Eve"),
    ("Bob", "Eve")
]
g.add_edges_from(edges)

g.edges()

print(g)
print(f"Number of nodes: {g.number_of_nodes()}")
print(f"Number of edges: {g.number_of_edges()}")
print(f"Nodes: {g.nodes}")
print(f"Edges: {g.edges}")

nx.draw( g)

nx.draw(
    g,
    with_labels=True,
    node_color="skyblue",
    edge_color="gray",
    node_size=800,
    font_size=10,
    font_weight="bold"
)

nx.draw_networkx(g)

plt.figure(figsize=(10,10))
nx.draw_networkx(g)
plt.show()

nx.spring_layout(g)
nx.draw_networkx(g)

degree_centrality = nx.degree_centrality(g)
print("Degree Centrality:", degree_centrality)

nx.shortest_path(g,"Alice", "Bob")

nx.shortest_path(g,"Alice", "David")

nx.eigenvector_centrality(g)

nx.eigenvector_centrality(g)

nx.betweenness_centrality(g)

nx.clustering(g,"Alice")

nx.average_clustering(g)

from networkx.algorithms.community import greedy_modularity_communities
communities = list(greedy_modularity_communities(g))
print("Detected Communities:")
for i, community in enumerate(communities):
    print(f"Community {i+1}: {sorted(community)}")

import matplotlib.colors as mcolors
colors = list(mcolors.TABLEAU_COLORS.values())
plt.figure(figsize=(8, 6))
plt.title("Social Network Communities")

pos = nx.spring_layout(g)
for i, community in enumerate(communities):
    nx.draw_networkx_nodes(g, pos, nodelist=community, node_color=colors[i % len(colors)], label=f"Community {i+1}")

nx.draw_networkx_edges(g, pos, edge_color='gray')
nx.draw_networkx_labels(g, pos)
plt.legend()
plt.show()